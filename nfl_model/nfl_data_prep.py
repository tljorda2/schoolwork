# -*- coding: utf-8 -*-
"""NFL Data Prep

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSQ8ZoEPzGNtOrJ1KUdlt7VoXwtp00ZR
"""

#Importing the neccessary packages
import pandas as pd
import re
import numpy as np

# Setting up path
from google.colab import drive
drive.mount('/content/drive/')

"""Initially, we are going to have 9 seperate tables from pro football reference: https://www.pro-football-reference.com/years/2022/
We are going to combine these all down in a single "stats" Dataframe
The initial dataframes are:


*   Team Offense
* Offensive Conversion
* Drive Average
* Offensive Kicking(Specifically Field Goal %)
* Team Defense
* Team Advanced Defense
* Conversion Against
* Drives Against
* Standings



"""

# Getting the dataframes
TeamOffense = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/TeamOffense.csv')
# Going to go one at a time to prep each data frame
# TeamOffense.info()
# info method shows that there are 35 values, specifically because there are summary rows at the bottom for the entire league
# We do not need these
TeamOffense.dropna(axis=0, inplace=True)
TeamOffense.info()
# Now there are 32 rows, which matches the amount of teams in the league
# All values are alsoa usuable data type
# I am going to only drop the 'Rk' and 'G' columns for now as those are totally irrelevant
TeamOffense.drop(['Rk', 'G'], axis=1, inplace=True)
TeamOffense.head()

Kicking = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/Kicking.csv')
# Kicking.info()
# We have multiple columns with the same name. We can go ahead and drop all of the FGA and FGM for all distances
# We only cared about the effiency %
# Getting the columns we care about
Kicking = Kicking[['Tm','FG%', 'XP%', 'TB%']]
Kicking.dropna(axis=0, inplace=True)
# Dropping the last row as the league total is still included
Kicking = Kicking.iloc[:-1]
# Kicking.info()
# End up with 32 values. Now we have to convert the percentages into float since they are the object type
columns = Kicking.keys()
# for loop to convert the values to floats
for i in columns:
  if i == 'Tm':
    pass
  else:
    Kicking[i] = Kicking[i].str.rstrip('%').astype(float)/100
#Displaying the final info for this table
Kicking.info()
Kicking.head()

Offensive_Conversion = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/Offensive_Conversions.csv')
# We basically have to do the same thing here as we did with the last dataframe
# Offensive_Conversion.info()
# Again, we discussed about only taking the effiency stats so lets narrow it down to them
Offensive_Conversion = Offensive_Conversion[['Tm', '3D%', '4D%', 'RZPct']]
Offensive_Conversion.dropna(axis=0, inplace=True)
# Offensive_Conversion.info()
# We have the correct amount of non-null values
# Now we need to convert the the dtypes to the correct type, float.
# Run the same loop as above
columns = Offensive_Conversion.keys()
# for loop to convert the values to floats
for i in columns:
  if i == 'Tm':
    pass
  else:
    Offensive_Conversion[i] = Offensive_Conversion[i].str.rstrip('%').astype(float)/100
# Also need to change the column names to be more descriptive
# Since we are using defensive conversion as well and they have the same labels.
Offensive_Conversion.rename(columns={'3D%': 'Offensive_3D%', '4D%': 'Offensive_4D%', 'RZPct': 'Offensive_RZPct'}, inplace=True)
#Displaying the final info for this table
Offensive_Conversion.info()
Offensive_Conversion.head()

DriveAverage = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/DriveAverage.csv')
#DriveAverage.info()
# Getting the columns we want, once again, just need the effiency stats
# We can always change this
DriveAverage = DriveAverage[['Tm', 'Sc%', 'TO%']]
#DriveAverage.info()
# Dropping last column since it is league averages
DriveAverage = DriveAverage.iloc[:-1]
# Renaming the columns since we will be using its defensive counterpart
DriveAverage.rename(columns={'Sc%':'Offensive_Sc%', 'TO%': 'Offensive_TO%'}, inplace=True)
DriveAverage.info()
DriveAverage.head()

TeamDefense = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/TeamDefense.csv')
# TeamDefense.info()
# Dropping null values and columns we do not need
# Basically followed the same thing with the team offense dataframe
TeamDefense.dropna(axis=0, inplace=True)
TeamDefense.drop(['Rk', 'G'], axis=1, inplace=True)
TeamDefense.info()

AdvancedDefense = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/AdvancedDefense.csv')
# AdvancedDefense.info()
# No need to drop null values
# Will need to adjust some of the data types
# Making a list of the dropped columns
# Not sure what to do with DADOT so ill keep it for now
# Also dropping some of the culamtive stats that can be represented by an efficiency stat
drop_col = ['G', 'Att', 'Cmp', 'Yds', 'TD', 'Bltz', 'Hrry', 'Prss', 'QBKD']
AdvancedDefense.drop(drop_col, axis=1, inplace=True)
# AdvancedDefense.info()
# Percentages are objects again so ill need to fix that
AdvancedDefense['Bltz%'] = AdvancedDefense['Bltz%'].str.rstrip('%').astype(float)/100
AdvancedDefense['Hrry%'] = AdvancedDefense['Hrry%'].str.rstrip('%').astype(float)/100
AdvancedDefense['QBKD%'] = AdvancedDefense['QBKD%'].str.rstrip('%').astype(float)/100
AdvancedDefense['Prss%'] = AdvancedDefense['Prss%'].str.rstrip('%').astype(float)/100
# Shows that they are all the proper datatypes
AdvancedDefense.info()
AdvancedDefense.head()

ConversionAgainst = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/ConversionsAgainst.csv')
#ConversionAgainst.info()
# Copy and pasting the offensive conversion code and changing it for this table
ConversionAgainst = ConversionAgainst[['Tm', '3D%', '4D%', 'RZPct']]
ConversionAgainst.dropna(axis=0, inplace=True)
# ConversionAgainst.info()
# We have the correct amount of non-null values
# Now we need to convert the the dtypes to the correct type, float.
# Run the same loop as above
columns = ConversionAgainst.keys()
# for loop to convert the values to floats
for i in columns:
  if i == 'Tm':
    pass
  else:
    ConversionAgainst[i] = ConversionAgainst[i].str.rstrip('%').astype(float)/100
# Also need to change the column names to be more descriptive
# Since we are using defensive conversion as well and they have the same labels.
ConversionAgainst.rename(columns={'3D%': 'Defensive_3D%', '4D%': 'Defensive_4D%', 'RZPct': 'Defensive_RZPct'}, inplace=True)
#Displaying the final info for this table
ConversionAgainst.info()
ConversionAgainst.head()

DrivesAgainst = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/DrivesAgainst.csv')
DrivesAgainst.info()
# Copy and pasting the DriveAverage code since it is the same and adjusting the variable names
# Getting the columns we want, once again, just need the effiency stats
# We can always change this
DrivesAgainst = DrivesAgainst[['Tm', 'Sc%', 'TO%']]
#DrivesAgainst.info()
# Renaming the columns since we will be using its defensive counterpart
DrivesAgainst.rename(columns={'Sc%':'Defensive_Sc%', 'TO%': 'Defensive_TO%'}, inplace=True)
DrivesAgainst.info()
DrivesAgainst.head()

"""Those are the first 8 dataframes needed for the overall stats. Now we need to adjust the standings table."""

# Reading the team data csv for the 2022-2023 season
SeasonStats = pd.read_csv('/content/drive/MyDrive/CIS 450 Team Project/NFL Data/TeamSeasonStats2022.csv')
# Sorting based on wins
SeasonStats = SeasonStats.sort_values('W', ascending=False)

# Replacing the special characters that appear in the Tm column since those represent if they made playoffs or not
for index, row in SeasonStats.iterrows():
    SeasonStats.loc[index, "Tm"] = row["Tm"].replace("*", "").replace("+", "")
SeasonStats
# All data types are usable
# Dropping redundant/not needed columns
# I dropped W/L/T since they are represented by W/L% but we can keep them if needed
SeasonStats.drop(['W', 'L', 'T', 'PF', 'PA'], axis=1, inplace=True)
SeasonStats.info()

"""All 9 initial tables are completed, and now need to be merged into one"""

# Merging all dataframes
# Creating a function so I do not have to rewrite certain parts of the code
def LeftJoin(Left, Right, On='Tm'):
  dataframe = pd.merge(left=Left, right=Right, how='left', on=On)
  return dataframe
# Running Function to join all of the dataframes above
Model_DF = LeftJoin(SeasonStats, TeamOffense)
Model_DF = LeftJoin(Model_DF, Kicking)
Model_DF = LeftJoin(Model_DF, Offensive_Conversion)
Model_DF = LeftJoin(Model_DF, DriveAverage)
Model_DF = LeftJoin(Model_DF, TeamDefense)
Model_DF = LeftJoin(Model_DF, AdvancedDefense)
Model_DF = LeftJoin(Model_DF, ConversionAgainst)
Model_DF = LeftJoin(Model_DF, DrivesAgainst)
# I think the info all checks out
Model_DF.info()
Model_DF

# Only run this if you want to download the final csv
# I downloaded it and added it the the drive
from google.colab import files
Model_DF.to_csv('Model_DF.csv', encoding = 'utf-8-sig') 
files.download('Model_DF.csv')